import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {jwtDecode} from 'jwt-decode'; // JWT 디코딩 라이브러리

const authConfig = {
    tokenUrl: 'http://auth.sesac-univ.click/oauth2/token',
    clientId: 'sesac-univ',
    clientSecret: 'secret',
    redirectUri: 'http://sesac-univ.click/auth/callback',
};

const Callback = () => {
    const navigate = useNavigate();
    const [error, setError] = useState(null);

    useEffect(() => {
        const urlParams = new URLSearchParams(window.location.search);
        const authorizationCode = urlParams.get('code');

        if (authorizationCode) {
            fetchAccessToken(authorizationCode);
        } else {
            setError('Authorization code is missing. Please try logging in again.');
        }
    }, []);

    const fetchAccessToken = async (authorizationCode) => {
        try {
            const response = await fetch(authConfig.tokenUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    grant_type: 'authorization_code',
                    code: authorizationCode,
                    redirect_uri: authConfig.redirectUri,
                    client_id: authConfig.clientId,
                    client_secret: authConfig.clientSecret,
                }),
            });

            const data = await response.json();

            if (data.access_token) {
                localStorage.setItem('access_token', data.access_token);
                localStorage.setItem('refresh_token', data.refresh_token);

                const decodedToken = jwtDecode(data.access_token);
                const roles = decodedToken.roles || [];
                const userId = decodedToken.sub;

                // 역할(Role) 및 부서 정보 구성
                const primaryRole = roles.includes('ROLE_학생') ? 'student' :
                    roles.includes('ROLE_교수') ? 'professor' :
                        roles.includes('ROLE_관리자') ? 'admin' : 'user';
                const department = roles.find(role => role.startsWith('ROLE_') && role !== 'ROLE_사용자')?.split('_')[1] || 'Unknown';

                // 사용자 데이터 저장
                const userData = {
                    id: userId,
                    name: '사용자 이름 미상', // 이름 정보를 추가로 가져오지 않는 경우 기본값 설정
                    role: primaryRole,
                    department: department,
                };

                localStorage.setItem('user', JSON.stringify(userData));

                navigate(`/${primaryRole}/dashboard`); // 역할에 따라 대시보드로 이동
            } else {
                setError('Failed to retrieve access token. Please try logging in again.');
            }
        } catch (error) {
            setError('Error fetching access token. Please try logging in again.');
        }
    };

    return (
        <div>
            <p>Processing authentication...</p>
            {error && <p style={{ color: 'red' }}>{error}</p>}
        </div>
    );
};

export default Callback;