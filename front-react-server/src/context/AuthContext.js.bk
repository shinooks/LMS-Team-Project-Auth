import React, { createContext, useContext, useState, useEffect } from 'react';
import {jwtDecode} from 'jwt-decode'; // JWT 디코딩 라이브러리 설치 필요
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [accessToken, setAccessToken] = useState(null);
  const [roles, setRoles] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    // 앱이 로드될 때 로컬 스토리지에서 토큰을 불러옴
    const token = localStorage.getItem('access_token');
    if (token) {
      try {
        const decodedToken = jwtDecode(token);
        const userId = decodedToken.sub;
        setUser(userId);
        setAccessToken(token);
        setRoles(decodedToken.roles || []);
      } catch (error) {
        console.error('Invalid token:', error);
        logout();
      }
    }
  }, []);

  const login = (userData, token) => {
    try {
      const decodedToken = jwtDecode(token);
      setUser(userData);
      setAccessToken(token);
      setRoles(decodedToken.roles || []);
      localStorage.setItem('user', JSON.stringify(userData));
      localStorage.setItem('access_token', token);

      // 역할에 따른 리다이렉션
      if (decodedToken.roles.includes('ROLE_학생')) {
        navigate('/student/dashboard');
      } else if (decodedToken.roles.includes('ROLE_교수')) {
        navigate('/professor/dashboard');
      } else if (decodedToken.roles.includes('ROLE_관리자')) {
        navigate('/admin/dashboard');
      } else {
        console.error('유효하지 않은 사용자 역할입니다.');
        logout();
      }
    } catch (error) {
      console.error('Invalid token during login:', error);
      logout();
    }
  };

  const logout = () => {
    setUser(null);
    setAccessToken(null);
    setRoles([]);
    localStorage.removeItem('user');
    localStorage.removeItem('access_token');
    navigate('/login');
  };

  return (
      <AuthContext.Provider value={{ user, accessToken, roles, login, logout }}>
        {children}
      </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth는 AuthProvider 내에서 사용되어야 합니다');
  }
  return context;
};